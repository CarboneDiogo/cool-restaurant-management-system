@page "/NewReservation"
@using cool_restaurant_management_system.Data;
@using Microsoft.Data.SqlClient;


<header>
    <h1>Create New Reservation</h1>
</header>
<div class="page-background">
    <div class="flex-container">
        <div class="form-container">
            <ModalHeader>
                <ModalTitle>Reservation Information</ModalTitle>
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Full Name</FieldLabel>
                    <TextEdit @bind-Text="guestName" Placeholder="Enter name" />
                </Field>
                <Field>
                    <FieldLabel >Phone Number</FieldLabel>
                    <TextEdit @bind-Text="phoneNumber" Placeholder="Enter Phone Number +19876543210" />
                </Field>
                <Field>
                    <FieldLable>Party Size: @partySize</FieldLable>
                    <Slider @bind-Value="@partySize" Min="1" Max="8" />
                </Field>
                <div class="flex-container" id="date-time-picker">
                    <Field>
                        <FieldLabel>Date</FieldLabel>
                        <DateEdit @bind-Date="selectedDate" Min="@DateTime.Today" />
                    </Field>
                    <Field>
                        <FieldLabel>Time</FieldLabel>
                        <TimeEdit @bind-Time="selectedTime"/>
                    </Field>
                    <Button Style="margin-top: 2vh;" Color="Color.Dark" Clicked="SearchTables">Search Available Tables</Button>
                </div>
                <Field>
                    <FieldLabel>Available Tables</FieldLabel>
                    <Select @bind-SelectedValue="@selectedTableId">
                        @foreach(var table in availableTablesList)
                        {
                            if(table != null)
                            {
                                <SelectItem Value=@table.Table_Id>Table ID: @table.Table_Id - Table Capacity: @table.Capacity</SelectItem>
                            }
                        }
                    </Select>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="Discard">Discard</Button>
                <Button Color="Color.Dark" Clicked="SaveReservation">Save Reservation</Button>
            </ModalFooter>
        </div>
    </div>
</div>


<footer>
    Photo by <a href="https://unsplash.com/@@iamhiteshdewasi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Hitesh Dewasi</a> on <a href="https://unsplash.com/photos/5JwBbnyZzfc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</footer>

@code {
    // Initialization of variables
    int partySize = 1;
    string guestName;
    string phoneNumber;
    int selectedTableId;

    // Create an instance of DbServer class for database operations
    DbServer db = new DbServer();
    List<RestaurantTables> availableTablesList = new List<RestaurantTables>();
    List<Reservations> reservationsList = new List<Reservations>();

    // Date and time selection variables
    DateTime selectedDate = DateTime.Now;
    TimeSpan selectedTime = DateTime.Now.TimeOfDay;
    DateTime combinedDateTime = DateTime.Now;

    // Method to save a new reservation
    public async void SaveReservation()
    {
        try
        {
            // Add new reservation to the database
            db.AddNewReservation(phoneNumber, guestName, selectedTableId, partySize, combinedDateTime);
            Discard();  // Reset form fields
            await Application.Current.MainPage.DisplayAlert("Success", "Guest Successfully added", "OK");

        }
        catch
        {
            ExceptionManager.ReservationCreationExceptions(phoneNumber, guestName, selectedTableId);  // Handle exceptions
        }
    }

    // Combine date and time into a single DateTime object
    void CombineDateTime()
    {
        combinedDateTime = selectedDate.Date + selectedTime;
    }

    // Search for available tables based on user input
    void SearchTables()
    {
        CombineDateTime();
        availableTablesList = db.GetAllTables();
        reservationsList = db.GetAllReservations();

        // Remove tables that are too big for the party size
        foreach (var table in availableTablesList.ToList())
        {
            if (TableIsTooBig(partySize, table.Capacity))
            {
                availableTablesList.Remove(table);
            }
        }

        // Remove tables that have a reservation less than 2 hours from the wanted time
        foreach (var reservation in reservationsList.ToList())
        {
            if (ReservationOverlaps(reservation.Reservation_Date, combinedDateTime))
            {
                foreach (var table in availableTablesList.ToList())
                {
                    if (table.Table_Id == reservation.Table_Id)
                    {
                        availableTablesList.Remove(table);
                    }
                }
            }
        }
    }

    // Reset form fields
    void Discard()
    {
        partySize = 1;
        guestName = null;
        phoneNumber = null;
        availableTablesList.Clear();
        selectedTableId = 0;
    }

    // Check if a table is too big for the party size
    bool TableIsTooBig(int partySize, int tableSize)
    {
        return (tableSize - partySize) > 2 || (tableSize - partySize) < 0;
    }

    // Check if two reservations are less than 2 hours apart from each other
    bool ReservationOverlaps(DateTime newReservation, DateTime existingReservation)
    {
        return Math.Abs((newReservation - existingReservation).TotalHours) < 2;
    }
}
