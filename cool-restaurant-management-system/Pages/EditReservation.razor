@page "/EditReservation"
@using cool_restaurant_management_system.Data


<header>
    <h1>Edit Reservation</h1>
</header>

<div class="page-background">
    <div class="flex-container">
        <div class="form-container">
            <ModalHeader>
                <ModalTitle>Edit Reservation</ModalTitle>
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Phone Number</FieldLabel>
                    <TextEdit ReadOnly="@phoneReadOnly" Placeholder="Enter Phone Number +19876543210" @bind-Text="@phoneNumber" />
                </Field>
                <Button Style="margin-left:25vh;" Color="Color.Dark" Clicked="FindReservation">Find Reservation</Button>
                <Field>
                    <FieldLabel>Full Name</FieldLabel>
                    <TextEdit ReadOnly="@nameReadOnly" @bind-Text="@guestName" />
                </Field>

                <Field>
                    <FieldLable>Party Size: @partySize</FieldLable>
                    <Slider @bind-Value="@partySize" Min="1" Max="8" />
                </Field>
                <div class="flex-container" id="date-time-picker">
                    <Field>
                        <FieldLabel>Date</FieldLabel>
                        <DateEdit @bind-Date="selectedDate" Min="@DateTime.Today" />
                    </Field>
                    <Field>
                        <FieldLabel>Time</FieldLabel>
                        <TimeEdit @bind-Time="selectedTime" />
                    </Field>
                    <Button Style="margin-top: 2vh;" Color="Color.Dark" Clicked="SearchTables">Find New Table</Button>
                </div>

                <Field>
                    <FieldLabel>Reserved Table</FieldLabel>
                    <Select ReadOnly="@tableReadOnly" @bind-SelectedValue="@selectedTableId">
                        @foreach(var table in availableTablesList)
                        {
                            if(table != null)
                            {
                                <SelectItem Value=@table.Table_Id>Table ID: @table.Table_Id - Table Capacity: @table.Capacity</SelectItem>
                            }
                        }
                    </Select>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="Clear">Discard</Button>
                <Button Color="Color.Danger" Clicked="DeleteReservation">Delete Reservation</Button>
                <Button Color="Color.Success" Clicked="SaveChanges">Save Changes</Button>
            </ModalFooter>
        </div>
    </div>
</div>

<footer>
    Photo by <a href="https://unsplash.com/@@iamhiteshdewasi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Hitesh Dewasi</a> on <a href="https://unsplash.com/photos/5JwBbnyZzfc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</footer>

@code {
    int partySize = 1;
    string guestName;
    string phoneNumber;
    int selectedTableId;
    bool phoneReadOnly = false;
    bool tableReadOnly = true;
    bool nameReadOnly = true;

    DbServer db = new DbServer();
    List<RestaurantTables> availableTablesList = new List<RestaurantTables>();
    List<Reservations> reservationsList = new List<Reservations>();

    DateTime selectedDate = DateTime.Now;
    TimeSpan selectedTime = DateTime.Now.TimeOfDay;
    DateTime combinedDateTime = DateTime.Now;

    void FindReservation()
    {
        reservationsList = db.GetAllReservations();
        foreach(var reservation in reservationsList)
        {
            if (reservation.Phone_Number == phoneNumber)
            {
                guestName = reservation.Guest_Name;
                partySize = reservation.Number_of_Guests;
                selectedDate = reservation.Reservation_Date.Date;
                selectedTime = reservation.Reservation_Date.TimeOfDay;
                GetTableById(reservation.Table_Id);
                tableReadOnly = true;
                phoneReadOnly = true;
                nameReadOnly = false;
            }
        }
    }

    void GetTableById(int id)
    {
        List<RestaurantTables> allTables = db.GetAllTables();
        foreach(var table in allTables)
        {
            if(table.Table_Id == id)
            {
                availableTablesList.Add(table);
            }
        }
    }

    void CombineDateTime()
    {
        combinedDateTime = selectedDate.Date + selectedTime;
    }

    void SearchTables()
    {
        CombineDateTime();
        availableTablesList = db.GetAllTables();
        reservationsList = db.GetAllReservations();
        tableReadOnly = false;

        //removing tables that are too big for the party
        foreach (var table in availableTablesList.ToList())
        {
            if (TableIsTooBig(partySize, table.Capacity))
            {
                availableTablesList.Remove(table);
            }
        }

        //removing tables that have a reservation less than 2 hours from the wanted time
        foreach (var reservation in reservationsList.ToList())
        {
            if (ReservationOverlaps(reservation.Reservation_Date, combinedDateTime))
            {
                foreach (var table in availableTablesList.ToList())
                {
                    if (table.Table_Id == reservation.Table_Id)
                    {
                        availableTablesList.Remove(table);
                    }
                }
            }
        }
    }

    async void SaveChanges()
    {
        try
        {
            CombineDateTime();
            db.UpdateReservation(phoneNumber, guestName, selectedTableId, partySize, combinedDateTime);
            Clear();
            await Application.Current.MainPage.DisplayAlert("Success", "Reservation Successfully Updated", "OK");

        }
        catch
        {
            await Application.Current.MainPage.DisplayAlert("Invalid Table Id", "You must select another table", "OK");
        }
    }

    async void DeleteReservation()
    {
        db.DeleteReservationByPhone(phoneNumber);
        Clear();
        await Application.Current.MainPage.DisplayAlert("Success", "Reservation Successfully Deleted", "OK");

    }

    bool TableIsTooBig(int partySize, int tableSize)
    {
        return (tableSize - partySize) > 2 || (tableSize - partySize) < 0;
    }

    //checks if two reservations are less than 2 hours apart from each other
    bool ReservationOverlaps(DateTime newReservation, DateTime existingReservation)
    {
        return Math.Abs((newReservation - existingReservation).TotalHours) < 2;
    }

    void Clear()
    {
        partySize = 1;
        guestName = "";
        phoneNumber = "";
        phoneReadOnly = false;
        tableReadOnly = true;
        nameReadOnly = true;
        selectedTableId = 0;
        availableTablesList.Clear();
    }
}
